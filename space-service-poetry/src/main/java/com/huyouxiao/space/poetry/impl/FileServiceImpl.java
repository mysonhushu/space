package com.huyouxiao.space.poetry.impl;

import com.huyouxiao.space.poetry.FileService;
import com.huyouxiao.space.poetry.bean.Name;
import com.huyouxiao.space.poetry.bean.Poetry;
import com.huyouxiao.space.poetry.bean.response.GenerateNameResponse;
import com.huyouxiao.space.poetry.utils.BackGroundImage;
import com.huyouxiao.space.zhouyi.bean.BoneWeight;
import com.huyouxiao.space.zhouyi.bean.response.NameScoreResponse;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.sun.scenario.effect.ImageData;
import org.springframework.stereotype.Service;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;


@Service
public class FileServiceImpl implements FileService {
  private static String FILE = "./names.pdf";

  private static final String FONT = "./chinese.stsong.ttf";

  private static BaseFont baseFont = null;

  private static Font catFont = null;

  private static Font redFont = null;

  private static Font subFont = null;

  private static Font smallBold = null;

  @Override
  public void generateNamePdf(GenerateNameResponse response) {
    generatePdf(response);
  }

  private void generatePdf(GenerateNameResponse response) {
    Document document = new Document();
    try {
      PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(FILE));
      writer.setPageEvent(new BackGroundImage());
      if (null == baseFont) {
        baseFont = BaseFont.createFont(FONT, BaseFont.IDENTITY_H,BaseFont.NOT_EMBEDDED);
        catFont = new Font(baseFont, 18, Font.BOLD);
        redFont = new Font(baseFont, 12, Font.NORMAL, BaseColor.RED);
        subFont = new Font(baseFont, 16, Font.BOLD);
        smallBold = new Font(baseFont, 12, Font.BOLD);
      }

      document.open();
      addMetaData(document);
      addTitlePage(document);
      addContent(document, response);
      document.close();

    } catch (DocumentException e) {
      e.printStackTrace();
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private void addMetaData(Document document) {
    document.addTitle("瓠悠笑诗歌取名");
    document.addSubject("瓠悠笑软件部落 http://huyouxiao.com ");
    document.addKeywords("诗歌取名, 人工智能取名, 瓠悠笑软件部落");
    document.addAuthor("南方山");
    document.addCreator("南方山");
  }

  private void addTitlePage(Document document) throws DocumentException, IOException {
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("瓠悠笑诗歌取名", catFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph(
        " 取名是一门涉及文学，历史，诗歌，哲学，心理学的古老而现代的学问。 ",  smallBold));
    addEmptyLine(preface, 3);
    preface.add(new Paragraph(
        "本文档根据你的要求，在海量诗歌中筛选，生成名字供你选择。\n" +
            "每个名字包含:\n"
            + "字典含义\n"
            + "引用诗歌\n"
            + "名字分析\n"
            + "智能评分\n" +
            "同时，根据你的生日计算出\n"
            + "生辰八字\n"
            + "五行属性\n"
            + "星座\n"
            + "生肖属性\n"
            + "太岁\n"
            + "守护神\n"
            + "幸运星座\n" +
            "希望能帮助到你。 ",
        smallBold));

    addEmptyLine(preface, 8);

    preface.add(new Paragraph(
        "如果你喜欢，请关注微信公众号:瓠悠笑软件部落。\n" + "如果你想一起创业，请留言联系我。",
        redFont));

    document.add(preface);

    Image img = Image.getInstance("space-service-poetry/src/main/resources/huyouxiaoQR.jpg");
    img.setAlignment(Element.ALIGN_CENTER);
    img.setAbsolutePosition(100, 230);
    document.add(img);

    // Start a new page
    document.newPage();
  }

  private void addContent(Document document, GenerateNameResponse response) throws DocumentException {
    Anchor firstAnchor = new Anchor("生日密码", catFont);
    firstAnchor.setName("生日密码");
    document.add(firstAnchor);

    Chapter firstChapter = new Chapter(new Paragraph(firstAnchor), 1);

    Paragraph bazhiParagraph = new Paragraph("生辰八字", subFont);
    Section bazhiSection = firstChapter.addSection(bazhiParagraph);


    addEmptyLine(bazhiSection, 2);

    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("你的阳历生日： ").append(response.getBaZhi().getSolarBirthday());
    bazhiSection.add(new Paragraph(stringBuffer.toString(), subFont));
    stringBuffer.setLength(0);


    stringBuffer.append("你的阴历生日： ").append(response.getBaZhi().getLunarBirthday());
    bazhiSection.add(new Paragraph(stringBuffer.toString(), subFont));
    stringBuffer.setLength(0);


    Paragraph birthParagraph = addEmptyLine(new Paragraph("你的生日五行:  " + response.getBaZhi().getCharacter(), subFont), 5);
    bazhiSection.add(birthParagraph);

    createBaZhiTable(bazhiSection, response.getBaZhi().getElements());
    addEmptyLine(bazhiSection, 5);
    stringBuffer.append("你的五行批注： ").append(response.getBaZhi().getDescription());
    bazhiSection.add(new Paragraph(stringBuffer.toString(), subFont));
    stringBuffer.setLength(0);

    addEmptyLine(bazhiSection, 5);

    document.add(bazhiSection);


    Paragraph zodiacParagraph = new Paragraph("生肖：", subFont);
    Section zodiacSection = firstChapter.addSection(zodiacParagraph);

    zodiacSection.add(new Paragraph("你的生肖： " + response.getBaZhi().getZodiac(), subFont));
    zodiacSection.add(new Paragraph("你的生肖守护神： " + response.getBaZhi().getZodiacBuddha(), subFont));
    zodiacSection.add(new Paragraph("你的太岁守护神： " + response.getBaZhi().getGod(), subFont));
    zodiacSection.add(new Paragraph("你的太岁守护神名字： " + response.getBaZhi().getGodName(), subFont));


    document.add(zodiacSection);

    addEmptyLine(zodiacSection, 5);
    Paragraph starParagraph = new Paragraph("星座：", subFont);
    Section starSection = firstChapter.addSection(starParagraph);

    starSection.add(new Paragraph("你的星座： " + response.getBaZhi().getConstellationName(), subFont));
    starSection.add(new Paragraph("你的星座属性： " + response.getBaZhi().getConstellationType(), subFont));
    starSection.add(new Paragraph("星座象型： " + response.getBaZhi().getConstellationElement(), subFont));
    starSection.add(new Paragraph("星座符号： " + response.getBaZhi().getConstellationSymbol(), subFont));
    document.add(starSection);

    addEmptyLine(starSection, 5);

    Paragraph boneParagraph = new Paragraph("称骨：", subFont);
    Section boneSection = firstChapter.addSection(boneParagraph);
    createBoneWeightList(boneSection, response.getBaZhi().getBoneWeight());

    document.add(boneSection);


    addEmptyLine(starSection, 5);

    // Next section
    Anchor secondAnchor =  new Anchor("好名推荐", catFont);

    Chapter secondChapter = new Chapter(new Paragraph(secondAnchor), 2);
    document.add(secondAnchor);

    Paragraph nameParagraph = new Paragraph("好名推荐", subFont);
    Section nameSection = secondChapter.addSection(nameParagraph);
    nameSection.add(new Paragraph("名字推荐列表", subFont));

    document.add(nameParagraph);

    createName(nameSection, response.getNames());
    for (Name name : response.getNames()) {
      createName(nameSection, name);
    }

    // now add all this to the document
    document.add(nameSection);
  }

  private void createBaZhiTable(Section subCatPart, java.util.List<com.huyouxiao.space.zhouyi.bean.Element> elements) {
    PdfPTable table = new PdfPTable(5);

    PdfPCell c1 = new PdfPCell(new Phrase("干支", subFont));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("字号", subFont));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("五行", subFont));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("藏支", subFont));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("权重", subFont));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    table.setHeaderRows(1);

    for (com.huyouxiao.space.zhouyi.bean.Element el : elements) {
      table.addCell(new Phrase(el.getPosition(), subFont));
      table.addCell(new Phrase(el.getName(), subFont));
      table.addCell(new Phrase(el.getElement(), subFont));
      table.addCell(new Phrase(el.getHiddenName(), subFont));
      table.addCell(new Phrase(el.getValue().toPlainString(), subFont));
    }

    subCatPart.add(table);
  }

  private void createBoneWeightList(Section section, BoneWeight boneWeight) {
    addEmptyLine(section, 5);
    section.add(new ListItem("骨重量：" + boneWeight.getBoneWeightName(), subFont));
    section.add(new ListItem("称骨解释：" + boneWeight.getBoneDescription(), subFont));
  }

  private Paragraph addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
    return paragraph;
  }

  private void addEmptyLine(Section section, int number) {
    Paragraph paragraph = new Paragraph();
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
    section.add(paragraph);
  }

  private void createName(Section section, List<Name> names) {
    createPhrase(section,"推荐姓名列表： ");
    StringBuffer stringBuffer = new StringBuffer();
    for(Name name : names) {
      stringBuffer.append(name.getChineseName()+ " " + name.getFrequency() + "  " + name.getPoetry().size()+ "\n");
    }

    createPhrase(section,stringBuffer.toString());
  }

  private void createName(Section section,  Name name) {
    createPhrase(section,"姓名： " + name.getChineseName() + " 得分: " + name.getScore() + " 特点: " + name.getFrequency());
    createPhrase(section,"来源诗歌： " + name.isFromPoetry());

    addEmptyLine(section, 4);

    createWordList(section, name.getWords());

    addEmptyLine(section, 4);

    // NOTICE: just ignore score.
    createNameGridList(section, name.getNameScore());

    createPoetryList(section, name.getPoetry());

    addEmptyLine(section, 6);
  }


  private void createWordList(Section section, java.util.List<com.huyouxiao.space.zhouyi.bean.Word> words) {
    if (null == words) {
      return;
    }
    for (com.huyouxiao.space.zhouyi.bean.Word word : words) {

      createPhrase(section,"汉字： " + word.getWord());
      createPhrase(section,"拼音： " + word.getPingYin());
      createPhrase(section,"笔画： " + word.getStrokes() + "画");
      createPhrase(section,"部首： " + word.getRadicals());
      createPhrase(section,"释义： " + word.getExplanation());
      addEmptyLine(section, 4);
    }

  }

  private void createNameGridList(Section section, NameScoreResponse nameScore) {
    createPhrase(section,"格类： " + nameScore.getHeaven().getGrid().getName());
    createPhrase(section,"描述： " + nameScore.getHeaven().getGrid().getDescription());
    createPhrase(section,"凶吉： " + nameScore.getHeaven().getFierce());
    addEmptyLine(section, 2);

    createPhrase(section,"格类： " + nameScore.getEarth().getGrid().getName());
    createPhrase(section,"描述： " + nameScore.getEarth().getGrid().getDescription());
    createPhrase(section,"凶吉： " + nameScore.getEarth().getFierce());
    addEmptyLine(section, 2);

    createPhrase(section,"格类： " + nameScore.getPerson().getGrid().getName());
    createPhrase(section,"描述： " + nameScore.getPerson().getGrid().getDescription());
    createPhrase(section,"凶吉： " + nameScore.getPerson().getFierce());
    addEmptyLine(section, 2);

    createPhrase(section,"格类： " + nameScore.getTotal().getGrid().getName());
    createPhrase(section,"描述： " + nameScore.getTotal().getGrid().getDescription());
    createPhrase(section,"凶吉： " + nameScore.getTotal().getFierce());
    addEmptyLine(section, 2);


    createPhrase(section,"格类： " + nameScore.getOut().getGrid().getName());
    createPhrase(section,"描述： " + nameScore.getOut().getGrid().getDescription());
    createPhrase(section,"凶吉： " + nameScore.getOut().getFierce());
    addEmptyLine(section, 2);

  }

  private void createPoetryList(Section section, List<Poetry> poetry) {
    if (null == poetry) {
      return;
    }

    for (Poetry item : poetry) {
      createPhrase(section, "出处： " + item.getName()+"\n");
      createPhrase(section,"朝代： " + item.getDynasty()+"\n");
      createPhrase(section, "语句： " + item.getSentence()+"\n");
      addEmptyLine(section, 2);
    }

  }

  private void createPhrase(Section section, String value) {
    section.add(new Phrase(value, subFont));
  }
}
